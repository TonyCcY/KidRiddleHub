<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Manage Fun Riddles!</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <a href="https://github.com/TonyCcY/KidRiddleHub" class="github-button" target="_blank">
        <svg class="github-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor">
            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/>
        </svg>
        View on GitHub
    </a>

    <div class="page-container">
        <h1>üìù Manage Your Riddles üìù</h1>
        
        <% if (typeof message !== 'undefined' && message) { %>
            <div class="message">
                <%= message %>
            </div>
        <% } %>
        
        <form action="/add-riddle" method="POST">
            <h2>‚ú® Add New Riddle ‚ú®</h2>
            <div class="form-group">
                <label>Question:</label>
                <input type="text" name="question" required placeholder="Type your riddle question here...">
            </div>
            <div class="form-group">
                <label>Answer:</label>
                <input type="text" name="answer" required placeholder="Type the answer here...">
            </div>
            <div class="form-buttons">
                <button type="submit">‚ûï Add Riddle</button>
            </div>
        </form>

        <div style="text-align: center; margin: 20px 0;">
            <input type="file" id="importFile" accept=".json" style="display: none;" onchange="importRiddles(this)">
            <button onclick="document.getElementById('importFile').click()" class="action-button">üì• Import Riddles</button>
            <button onclick="exportRiddles()" class="action-button">üì§ Export Riddles</button>
        </div>

        <h2>üéØ Current Riddles üéØ</h2>
        <ul class="riddle-list" id="riddleList">
            <% riddles.forEach((riddle, index) => { %>
                <li>
                    <div class="riddle-content">
                        <strong>Q: <%= riddle.question %></strong>
                        <br>
                        <em>A: <%= riddle.answer %></em>
                    </div>
                    <button onclick="deleteRiddle(<%= index %>)" class="delete-button">‚ùå Delete</button>
                </li>
            <% }) %>
        </ul>

        <div class="pagination">
            <button onclick="changePage(currentPage - 1)" 
                    class="page-button" id="prevButton">
                ‚¨ÖÔ∏è Previous
            </button>
            
            <span class="page-info" id="pageInfo">Page <%= currentPage %> of <%= totalPages %></span>
            
            <button onclick="changePage(currentPage + 1)" 
                    class="page-button" id="nextButton">
                Next ‚û°Ô∏è
            </button>
        </div>
        
        <div class="navigation">
            <a href="/">üè† Back to Riddle Time</a>
        </div>
    </div>

    <script>
        let currentPage = <%= currentPage %>;
        let totalPages = <%= totalPages %>;

        function updatePaginationButtons() {
            document.getElementById('prevButton').classList.toggle('active', currentPage > 1);
            document.getElementById('nextButton').classList.toggle('active', currentPage < totalPages);
            document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
        }

        function renderRiddles(riddles) {
            const riddleList = document.getElementById('riddleList');
            let html = riddles.map((riddle, index) => `
                <li>
                    <div class="riddle-content">
                        <strong>Q: ${riddle.question}</strong>
                        <br>
                        <em>A: ${riddle.answer}</em>
                    </div>
                    <button onclick="deleteRiddle(${index})" class="delete-button">‚ùå Delete</button>
                </li>
            `).join('');

            // Add placeholders if needed
            const placeholdersNeeded = <%= RIDDLES_PER_PAGE %> - riddles.length;
            if (placeholdersNeeded > 0) {
                for (let i = 0; i < placeholdersNeeded; i++) {
                    html += `
                        <li class="placeholder">
                            <div class="riddle-content">
                                <strong>Empty slot</strong>
                            </div>
                        </li>
                    `;
                }
            }
            
            riddleList.innerHTML = html;
        }

        async function changePage(newPage) {
            if (newPage < 1 || newPage > totalPages) return;
            
            try {
                const response = await fetch(`/api/riddles?page=${newPage}`);
                const data = await response.json();
                
                currentPage = data.currentPage;
                totalPages = data.totalPages;
                renderRiddles(data.riddles);
                updatePaginationButtons();
                
                // Update URL without page reload
                history.pushState({}, '', `/manage?page=${currentPage}`);
            } catch (error) {
                console.error('Error fetching riddles:', error);
            }
        }

        function deleteRiddle(index) {
            const confirmDelete = confirm('Are you sure you want to delete this riddle?');
            if (confirmDelete) {
                fetch(`/delete-riddle/${index}?page=${currentPage}`, {
                    method: 'DELETE'
                }).then(() => {
                    changePage(currentPage); // Refresh current page
                });
            }
        }

        // Auto-hide message after 3 seconds
        const message = document.querySelector('.message');
        if (message) {
            setTimeout(() => {
                message.style.opacity = '0';
                setTimeout(() => message.remove(), 500);
            }, 3000);
        }

        // Initialize pagination buttons
        updatePaginationButtons();

        async function exportRiddles() {
            try {
                const response = await fetch('/api/riddles/all');
                const data = await response.json();
                
                // Create file content
                const fileContent = JSON.stringify(data.riddles, null, 4);
                
                // Create download link
                const blob = new Blob([fileContent], { type: 'application/json' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'riddles.json';
                
                // Trigger download
                document.body.appendChild(a);
                a.click();
                
                // Cleanup
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } catch (error) {
                console.error('Error exporting riddles:', error);
                alert('Error exporting riddles');
            }
        }

        async function importRiddles(input) {
            try {
                const file = input.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = async (e) => {
                    try {
                        const riddles = JSON.parse(e.target.result);
                        
                        // Validate format
                        if (!Array.isArray(riddles) || !riddles.every(r => r.question && r.answer)) {
                            throw new Error('Invalid riddle format');
                        }
                        
                        // Send to server
                        const response = await fetch('/api/riddles/import', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ riddles })
                        });
                        
                        if (!response.ok) throw new Error('Import failed');
                        
                        // Refresh page
                        window.location.reload();
                    } catch (error) {
                        console.error('Error parsing file:', error);
                        alert('Invalid riddle file format');
                    }
                };
                reader.readAsText(file);
            } catch (error) {
                console.error('Error importing riddles:', error);
                alert('Error importing riddles');
            }
        }
    </script>
</body>
</html>